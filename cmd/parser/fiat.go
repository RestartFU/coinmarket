package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
)

var fiatConversionURL = "https://api.coinmarketcap.com/data-api/v3/cryptocurrency/quote/latest?id=2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2823,3554,3544,2821,2817,2824,2819,2813,2820,3538,3566,3530,3540,2814,3573&convertId=2781"

type data struct {
	Data []struct {
		Symbol string `json:"symbol"`
		Quotes []struct {
			Price float64 `json:"price"`
		} `json:"quotes"`
	} `json:"data"`
}

func main() {
	resp, err := http.Get(fiatConversionURL)
	if err != nil {
		panic(err)
	}

	buf, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	var currencies data
	err = json.Unmarshal(buf, &currencies)
	if err != nil {
		panic(err)
	}

	variables := `
	// Generated by running 'go run cmd/parser/fiat.go'
	package fiat
	var (
	`

	function := `
	func All() []Currency{
	return []Currency{
	`
	for _, currency := range currencies.Data {
		variables += fmt.Sprintf(`	%s = newCurrency("%s") // %s is worth: $%.8f USD`, currency.Symbol, currency.Symbol, currency.Symbol, currency.Quotes[0].Price) + "\n"
		function += currency.Symbol + ","
	}
	variables += `)`
	function += `
		}}`

	err = os.Remove("coinmarket/fiat/currencies_generated.go")
	if err != nil && !os.IsNotExist(err) {
		panic(err)
	}

	err = os.WriteFile("coinmarketcap/fiat/currencies_generated.go", []byte(variables+"\n"+function), 0777)
	if err != nil {
		panic(err)
	}

	cmd := exec.Command("go", "fmt", "coinmarketcap/fiat/currencies_generated.go")
	err = cmd.Run()
	if err != nil {
		panic(err)
	}
}
